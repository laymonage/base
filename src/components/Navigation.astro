---
import { Icon } from 'astro-icon/components';
import Link from './Link.astro';
import ThemeSwitcher from './ThemeSwitcher.astro';

const menu = ['posts', 'thoughts', 'projects', 'palates', 'about'];

const { pathname } = Astro.url;
const subpath = pathname.match(/[^\/]+/g);
---

<l-nav class="block mx-auto max-w-4xl group">
  <nav
    class="ease fixed text-lg group-open:pt-3 sm:p-0 bottom-0 sm:top-0 sm:bottom-auto z-20 flex w-full max-w-4xl mx-auto transform flex-col-reverse bg-white transition-transform duration-300 dark:bg-slate-800 sm:flex-row sm:items-center sm:justify-between drop-shadow"
  >
    <div class="py-3 mx-4 flex flex-grow items-center justify-between">
      <Link
        aria-label="Home"
        class="mr-2 text-blue-800 dark:text-blue-200"
        href="/"
      >
        <Icon aria-hidden="true" class="w-8 h-8 sm:h-10 sm:w-10" name="logo" />
      </Link>
      <div class="flex items-center justify-between gap-4">
        <ThemeSwitcher />
        <Link aria-label="Search" href="/search">
          <Icon aria-hidden="true" class="w-6 h-6" name="tabler:search" />
        </Link>
        <button
          aria-expanded="false"
          aria-label="Toggle navigation menu"
          class="alike group fill-current sm:hidden"
          data-l-nav-toggle
          type="button"
        >
          <Icon
            aria-hidden="true"
            class="w-6 h-6 hidden group-aria-expanded:block"
            name="tabler:x"
            stroke-width={2.5}
          />
          <Icon
            aria-hidden="true"
            class="w-6 h-6 block group-aria-expanded:hidden"
            name="tabler:menu-2"
            stroke-width={2.5}
          />
        </button>
      </div>
    </div>
    <div
      class="mr-0 px-3 hidden max-h-[50vh] sm:mr-4 sm:flex sm:items-center sm:p-0 overflow-auto"
      data-l-nav-items
    >
      {
        menu.map((m) => (
          <Link
            class:list={[
              'mb-2 block rounded p-2 font-semibold capitalize hover:bg-blue-100 hover:bg-opacity-50 dark:hover:bg-gray-700 dark:hover:bg-opacity-50 sm:mb-0 sm:ml-4 sm:first:ml-0 -outline-offset-2',
              {
                'text-blue-700 dark:text-blue-200': m === subpath?.[0],
              },
            ]}
            href={`/${m}`}
          >
            {m}
          </Link>
        ))
      }
    </div>
  </nav>
</l-nav>

<script>
  class Navigation extends HTMLElement {
    static identifier = 'l-nav';
    static observedAttributes = ['open'] as const;
    static hideOffset = 64;

    nav = this.querySelector('nav')!;
    toggle = this.querySelector('[data-l-nav-toggle]')!;
    navItems = this.querySelector('[data-l-nav-items]')!;
    focusableElements = this.querySelectorAll<HTMLElement>('a, button');
    firstFocusable = this.focusableElements[0];
    lastFocusable = this.focusableElements[this.focusableElements.length - 1];

    lastScroll = 0;

    connectedCallback() {
      this.toggleShow = this.toggleShow.bind(this);
      this.toggleMenu = this.toggleMenu.bind(this);
      this.trapFocus = this.trapFocus.bind(this);
      this.hide = this.hide.bind(this);
      this.toggle.addEventListener('click', this.toggleMenu);
      this.addEventListener('focusin', this.toggleShow);
      this.addEventListener('focusout', this.trapFocus);
      window.addEventListener('scroll', this.hide);
    }

    disconnectedCallback() {
      window.removeEventListener('scroll', this.hide);
      this.removeEventListener('focusout', this.trapFocus);
      this.removeEventListener('focusin', this.toggleShow);
      this.toggle.removeEventListener('click', this.toggleMenu);
    }

    get open() {
      return this.hasAttribute('open');
    }

    set open(value) {
      if (this.open === value) return;
      if (value) {
        this.setAttribute('open', '');
      } else {
        this.removeAttribute('open');
      }
    }

    get hidden() {
      return (
        window.scrollY >= this.lastScroll &&
        !this.contains(document.activeElement)
      );
    }

    attributeChangedCallback(
      _name: (typeof Navigation.observedAttributes)[number],
      _oldValue: boolean,
      newValue: boolean,
    ) {
      this.open = newValue !== null;
    }

    hide() {
      if (!(Math.abs(window.scrollY - this.lastScroll) > Navigation.hideOffset))
        return;
      this.toggleShow();
      this.lastScroll = window.scrollY;
    }

    toggleShow() {
      const hidden = this.hidden;
      this.nav.classList.toggle('translate-y-full', hidden);
      this.nav.classList.toggle('sm:-translate-y-full', hidden);
    }

    toggleMenu() {
      this.open = !this.open;
      this.toggle.setAttribute('aria-expanded', `${this.open}`);
      this.navItems.classList.toggle('hidden', !this.open);
    }

    trapFocus(event: FocusEvent) {
      if (!this.open || this.contains(event.relatedTarget as HTMLElement))
        return;

      if (event.target === this.firstFocusable) {
        this.lastFocusable.focus();
      } else if (event.target === this.lastFocusable) {
        this.firstFocusable.focus();
      }
    }
  }

  customElements.define(Navigation.identifier, Navigation);
</script>
