---
interface Props {
  eager?: boolean;
  class?: string;
}

const { eager = false, class: className } = Astro.props;
---

<l-giscus class:list={className}>
  <template data-giscus-widget>
    <giscus-widget
      category="Comments"
      categoryid="MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyNzIzMDI4"
      emitmetadata="0"
      inputposition="bottom"
      lang="en"
      mapping="pathname"
      reactionsenabled="1"
      repo="laymonage/isle"
      repoid="MDEwOlJlcG9zaXRvcnkzNDExNDE2OTY"
      theme="preferred_color_scheme"></giscus-widget>
  </template>

  {
    !eager && (
      <button
        class="hover rounded bg-gray-100 py-2 px-4 mx-auto block text-base text-gray-600 hover:bg-gray-200 hover:text-gray-800 focus:bg-gray-200 focus:text-gray-800 dark:bg-gray-800 dark:text-gray-300 dark:hover:bg-gray-700 dark:hover:text-white dark:focus:bg-gray-700 dark:focus:text-white"
        data-show-comments
        type="button"
      >
        Load comments
      </button>
    )
  }
</l-giscus>

<script>
  class Giscus extends HTMLElement {
    static identifier = 'l-giscus';
    static themes = {
      light: 'light',
      dark: 'transparent_dark',
    };

    button = this.querySelector<HTMLButtonElement>('[data-show-comments]');
    widget = this.querySelector<HTMLTemplateElement>('[data-giscus-widget]')!;

    connectedCallback() {
      this.updateTheme = this.updateTheme.bind(this);
      this.loadComments = this.loadComments.bind(this);
      document.addEventListener('l-theme-switcher:changed', this.updateTheme);

      if (this.button) {
        this.button.addEventListener('click', this.loadComments);
      } else {
        window.addEventListener('load', this.loadComments, { once: true });
      }
    }

    disconnectedCallback() {
      document.removeEventListener(
        'l-theme-switcher:changed',
        this.updateTheme,
      );
      this.button?.removeEventListener('click', this.loadComments);
    }

    loadComments() {
      if (!this.widget) return;

      const resolvedTheme = document.documentElement.dataset
        .resolvedTheme as keyof typeof Giscus.themes;
      if (resolvedTheme) {
        this.widget.content.firstElementChild!.setAttribute(
          'theme',
          Giscus.themes[resolvedTheme],
        );
      }

      import('giscus').then(() => {
        this.widget?.replaceWith(this.widget.content);
        this.button?.remove();
      });
    }

    updateTheme(event: Event) {
      const { resolvedTheme } = (event as CustomEvent).detail;
      this.querySelector('giscus-widget')?.setAttribute(
        'theme',
        Giscus.themes[resolvedTheme as keyof typeof Giscus.themes],
      );
    }
  }

  customElements.define(Giscus.identifier, Giscus);
</script>
